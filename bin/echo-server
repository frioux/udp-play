use 5.16.1;
use warnings;

use List::Util 'max';

use Socket;
use IO::Async::Socket;
use IO::Async::Loop;
use IO::Async::Connector;
use IO::Async::Timer::Periodic;

use Log::Contextual qw( :log :dlog set_logger with_logger );
use Log::Log4perl ':easy';
Log::Log4perl->easy_init($DEBUG);
my $logger  = Log::Log4perl->get_logger;
set_logger $logger;

use Devel::Dwarn;

my $loop = IO::Async::Loop->new;

my $s = IO::Socket::INET->new(
   Proto => 'udp',
   ReuseAddr => 1,
   Type => SOCK_DGRAM,
   LocalPort => 8001,
) or die "No bind: $@\n";

my %seen;
my $timer = IO::Async::Timer::Periodic->new(
   interval => 15,

   on_tick => sub { Dwarn \%seen },
);

$timer->start;
$loop->add($timer);

my $sock = IO::Async::Socket->new(
   handle => $s,
   on_recv => sub {
      my ( $self, $dgram, $addr ) = @_;

      my $client = $s->peerhost . ':' . $s->peerport;
      my ($id, $message) = split /\0/, $dgram, 3;

      $seen{$client} = max($seen{$client} || 0, $id);
      log_trace { "id: $id" };
      if ($message eq 'heartbeat') {
         log_debug { "saw heartbeat $id" };
      } else {
         say "Received reply: $message";

         $self->send($dgram, $addr);
      }
   },
   on_recv_error => sub {
      my ( $self, $errno ) = @_;
      die "Cannot recv - $errno\n";
   },
);
$loop->add($sock);
$loop->run;
